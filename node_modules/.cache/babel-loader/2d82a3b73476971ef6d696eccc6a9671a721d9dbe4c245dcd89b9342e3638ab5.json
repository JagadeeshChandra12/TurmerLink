{"ast":null,"code":"// Blockchain service for supply chain traceability\nclass BlockchainService {\n  constructor() {\n    this.chain = [];\n    this.pendingTransactions = [];\n    this.miningReward = 100;\n    this.difficulty = 2;\n    this.createGenesisBlock();\n  }\n  createGenesisBlock() {\n    const genesisBlock = {\n      timestamp: Date.now(),\n      transactions: [],\n      previousHash: '0',\n      hash: this.calculateHash({\n        timestamp: Date.now(),\n        transactions: [],\n        previousHash: '0'\n      }),\n      nonce: 0\n    };\n    this.chain.push(genesisBlock);\n  }\n  createTransaction(from, to, amount, data = {}) {\n    const transaction = {\n      from,\n      to,\n      amount,\n      data,\n      timestamp: Date.now(),\n      id: this.generateTransactionId()\n    };\n    this.pendingTransactions.push(transaction);\n    return transaction;\n  }\n  minePendingTransactions(miningRewardAddress) {\n    const block = {\n      timestamp: Date.now(),\n      transactions: this.pendingTransactions,\n      previousHash: this.getLatestBlock().hash,\n      nonce: 0\n    };\n    block.hash = this.calculateHash(block);\n    while (block.hash.substring(0, this.difficulty) !== Array(this.difficulty + 1).join('0')) {\n      block.nonce++;\n      block.hash = this.calculateHash(block);\n    }\n    this.chain.push(block);\n    this.pendingTransactions = [{\n      from: null,\n      to: miningRewardAddress,\n      amount: this.miningReward,\n      timestamp: Date.now(),\n      id: this.generateTransactionId()\n    }];\n    return block;\n  }\n  calculateHash(block) {\n    return this.simpleHash(JSON.stringify(block));\n  }\n  simpleHash(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return Math.abs(hash).toString(16);\n  }\n  generateTransactionId() {\n    return 'tx_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n  getLatestBlock() {\n    return this.chain[this.chain.length - 1];\n  }\n  getBalance(address) {\n    let balance = 0;\n    for (const block of this.chain) {\n      for (const transaction of block.transactions) {\n        if (transaction.from === address) {\n          balance -= transaction.amount;\n        }\n        if (transaction.to === address) {\n          balance += transaction.amount;\n        }\n      }\n    }\n    return balance;\n  }\n  getTransactionHistory(address) {\n    const transactions = [];\n    for (const block of this.chain) {\n      for (const transaction of block.transactions) {\n        if (transaction.from === address || transaction.to === address) {\n          transactions.push({\n            ...transaction,\n            blockHash: block.hash,\n            blockTimestamp: block.timestamp\n          });\n        }\n      }\n    }\n    return transactions.sort((a, b) => b.timestamp - a.timestamp);\n  }\n\n  // Turmeric-specific traceability methods\n  createTurmericBatch(farmerId, batchData) {\n    const transaction = this.createTransaction('system', farmerId, 0, {\n      type: 'turmeric_batch_created',\n      batchId: `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      farmerId,\n      ...batchData,\n      timestamp: Date.now()\n    });\n    this.minePendingTransactions('system');\n    return transaction;\n  }\n  updateBatchStatus(batchId, status, data = {}) {\n    const transaction = this.createTransaction('system', 'system', 0, {\n      type: 'batch_status_update',\n      batchId,\n      status,\n      ...data,\n      timestamp: Date.now()\n    });\n    this.minePendingTransactions('system');\n    return transaction;\n  }\n  transferOwnership(batchId, from, to, price) {\n    const transaction = this.createTransaction(from, to, price, {\n      type: 'ownership_transfer',\n      batchId,\n      timestamp: Date.now()\n    });\n    this.minePendingTransactions('system');\n    return transaction;\n  }\n  getBatchHistory(batchId) {\n    const history = [];\n    for (const block of this.chain) {\n      for (const transaction of block.transactions) {\n        if (transaction.data && transaction.data.batchId === batchId) {\n          history.push({\n            ...transaction,\n            blockHash: block.hash,\n            blockTimestamp: block.timestamp\n          });\n        }\n      }\n    }\n    return history.sort((a, b) => a.timestamp - b.timestamp);\n  }\n  verifyBatch(batchId) {\n    const history = this.getBatchHistory(batchId);\n    if (history.length === 0) return {\n      valid: false,\n      reason: 'Batch not found'\n    };\n\n    // Check if batch was properly created\n    const creation = history.find(t => t.data.type === 'turmeric_batch_created');\n    if (!creation) return {\n      valid: false,\n      reason: 'No creation record found'\n    };\n    return {\n      valid: true,\n      batchData: creation.data,\n      history: history,\n      currentOwner: this.getCurrentOwner(batchId),\n      totalTransactions: history.length\n    };\n  }\n  getCurrentOwner(batchId) {\n    const history = this.getBatchHistory(batchId);\n    const transfers = history.filter(t => t.data.type === 'ownership_transfer');\n    if (transfers.length === 0) {\n      const creation = history.find(t => t.data.type === 'turmeric_batch_created');\n      return creation ? creation.data.farmerId : null;\n    }\n    return transfers[transfers.length - 1].to;\n  }\n}\n\n// Export for use in React components\nexport default BlockchainService;","map":{"version":3,"names":["BlockchainService","constructor","chain","pendingTransactions","miningReward","difficulty","createGenesisBlock","genesisBlock","timestamp","Date","now","transactions","previousHash","hash","calculateHash","nonce","push","createTransaction","from","to","amount","data","transaction","id","generateTransactionId","minePendingTransactions","miningRewardAddress","block","getLatestBlock","substring","Array","join","simpleHash","JSON","stringify","str","i","length","char","charCodeAt","Math","abs","toString","random","substr","getBalance","address","balance","getTransactionHistory","blockHash","blockTimestamp","sort","a","b","createTurmericBatch","farmerId","batchData","type","batchId","updateBatchStatus","status","transferOwnership","price","getBatchHistory","history","verifyBatch","valid","reason","creation","find","t","currentOwner","getCurrentOwner","totalTransactions","transfers","filter"],"sources":["C:/Turmerik Bits/src/services/blockchainService.js"],"sourcesContent":["// Blockchain service for supply chain traceability\r\nclass BlockchainService {\r\n  constructor() {\r\n    this.chain = [];\r\n    this.pendingTransactions = [];\r\n    this.miningReward = 100;\r\n    this.difficulty = 2;\r\n    this.createGenesisBlock();\r\n  }\r\n\r\n  createGenesisBlock() {\r\n    const genesisBlock = {\r\n      timestamp: Date.now(),\r\n      transactions: [],\r\n      previousHash: '0',\r\n      hash: this.calculateHash({\r\n        timestamp: Date.now(),\r\n        transactions: [],\r\n        previousHash: '0'\r\n      }),\r\n      nonce: 0\r\n    };\r\n    this.chain.push(genesisBlock);\r\n  }\r\n\r\n  createTransaction(from, to, amount, data = {}) {\r\n    const transaction = {\r\n      from,\r\n      to,\r\n      amount,\r\n      data,\r\n      timestamp: Date.now(),\r\n      id: this.generateTransactionId()\r\n    };\r\n    \r\n    this.pendingTransactions.push(transaction);\r\n    return transaction;\r\n  }\r\n\r\n  minePendingTransactions(miningRewardAddress) {\r\n    const block = {\r\n      timestamp: Date.now(),\r\n      transactions: this.pendingTransactions,\r\n      previousHash: this.getLatestBlock().hash,\r\n      nonce: 0\r\n    };\r\n\r\n    block.hash = this.calculateHash(block);\r\n    \r\n    while (block.hash.substring(0, this.difficulty) !== Array(this.difficulty + 1).join('0')) {\r\n      block.nonce++;\r\n      block.hash = this.calculateHash(block);\r\n    }\r\n\r\n    this.chain.push(block);\r\n    this.pendingTransactions = [\r\n      {\r\n        from: null,\r\n        to: miningRewardAddress,\r\n        amount: this.miningReward,\r\n        timestamp: Date.now(),\r\n        id: this.generateTransactionId()\r\n      }\r\n    ];\r\n\r\n    return block;\r\n  }\r\n\r\n  calculateHash(block) {\r\n    return this.simpleHash(JSON.stringify(block));\r\n  }\r\n\r\n  simpleHash(str) {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n    return Math.abs(hash).toString(16);\r\n  }\r\n\r\n  generateTransactionId() {\r\n    return 'tx_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\n  getLatestBlock() {\r\n    return this.chain[this.chain.length - 1];\r\n  }\r\n\r\n  getBalance(address) {\r\n    let balance = 0;\r\n    for (const block of this.chain) {\r\n      for (const transaction of block.transactions) {\r\n        if (transaction.from === address) {\r\n          balance -= transaction.amount;\r\n        }\r\n        if (transaction.to === address) {\r\n          balance += transaction.amount;\r\n        }\r\n      }\r\n    }\r\n    return balance;\r\n  }\r\n\r\n  getTransactionHistory(address) {\r\n    const transactions = [];\r\n    for (const block of this.chain) {\r\n      for (const transaction of block.transactions) {\r\n        if (transaction.from === address || transaction.to === address) {\r\n          transactions.push({\r\n            ...transaction,\r\n            blockHash: block.hash,\r\n            blockTimestamp: block.timestamp\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return transactions.sort((a, b) => b.timestamp - a.timestamp);\r\n  }\r\n\r\n  // Turmeric-specific traceability methods\r\n  createTurmericBatch(farmerId, batchData) {\r\n    const transaction = this.createTransaction(\r\n      'system',\r\n      farmerId,\r\n      0,\r\n      {\r\n        type: 'turmeric_batch_created',\r\n        batchId: `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        farmerId,\r\n        ...batchData,\r\n        timestamp: Date.now()\r\n      }\r\n    );\r\n    \r\n    this.minePendingTransactions('system');\r\n    return transaction;\r\n  }\r\n\r\n  updateBatchStatus(batchId, status, data = {}) {\r\n    const transaction = this.createTransaction(\r\n      'system',\r\n      'system',\r\n      0,\r\n      {\r\n        type: 'batch_status_update',\r\n        batchId,\r\n        status,\r\n        ...data,\r\n        timestamp: Date.now()\r\n      }\r\n    );\r\n    \r\n    this.minePendingTransactions('system');\r\n    return transaction;\r\n  }\r\n\r\n  transferOwnership(batchId, from, to, price) {\r\n    const transaction = this.createTransaction(\r\n      from,\r\n      to,\r\n      price,\r\n      {\r\n        type: 'ownership_transfer',\r\n        batchId,\r\n        timestamp: Date.now()\r\n      }\r\n    );\r\n    \r\n    this.minePendingTransactions('system');\r\n    return transaction;\r\n  }\r\n\r\n  getBatchHistory(batchId) {\r\n    const history = [];\r\n    for (const block of this.chain) {\r\n      for (const transaction of block.transactions) {\r\n        if (transaction.data && transaction.data.batchId === batchId) {\r\n          history.push({\r\n            ...transaction,\r\n            blockHash: block.hash,\r\n            blockTimestamp: block.timestamp\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return history.sort((a, b) => a.timestamp - b.timestamp);\r\n  }\r\n\r\n  verifyBatch(batchId) {\r\n    const history = this.getBatchHistory(batchId);\r\n    if (history.length === 0) return { valid: false, reason: 'Batch not found' };\r\n    \r\n    // Check if batch was properly created\r\n    const creation = history.find(t => t.data.type === 'turmeric_batch_created');\r\n    if (!creation) return { valid: false, reason: 'No creation record found' };\r\n    \r\n    return {\r\n      valid: true,\r\n      batchData: creation.data,\r\n      history: history,\r\n      currentOwner: this.getCurrentOwner(batchId),\r\n      totalTransactions: history.length\r\n    };\r\n  }\r\n\r\n  getCurrentOwner(batchId) {\r\n    const history = this.getBatchHistory(batchId);\r\n    const transfers = history.filter(t => t.data.type === 'ownership_transfer');\r\n    if (transfers.length === 0) {\r\n      const creation = history.find(t => t.data.type === 'turmeric_batch_created');\r\n      return creation ? creation.data.farmerId : null;\r\n    }\r\n    return transfers[transfers.length - 1].to;\r\n  }\r\n}\r\n\r\n// Export for use in React components\r\nexport default BlockchainService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}