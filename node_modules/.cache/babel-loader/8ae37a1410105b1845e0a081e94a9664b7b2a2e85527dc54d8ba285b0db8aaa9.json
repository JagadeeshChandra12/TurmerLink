{"ast":null,"code":"import axios from 'axios';\n\n// API configuration\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://api.turmerlink.com';\n\n// Market price API endpoints (mock data for now)\nexport const marketPriceAPI = {\n  // Get current turmeric prices from various sources\n  getCurrentPrices: async () => {\n    try {\n      // Mock data - replace with actual API calls\n      return {\n        mandi: {\n          nizamabad: 8500,\n          hyderabad: 8700,\n          mumbai: 9200\n        },\n        export: {\n          chennai: 9500,\n          kochi: 9800\n        },\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching market prices:', error);\n      throw error;\n    }\n  },\n  // Get price trends for the last 7 days\n  getPriceTrends: async () => {\n    try {\n      // Mock data - replace with actual API calls\n      const trends = [];\n      const today = new Date();\n      for (let i = 6; i >= 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        trends.push({\n          date: date.toISOString().split('T')[0],\n          nizamabad: 8000 + Math.random() * 1000,\n          hyderabad: 8200 + Math.random() * 1000,\n          mumbai: 8700 + Math.random() * 1000\n        });\n      }\n      return trends;\n    } catch (error) {\n      console.error('Error fetching price trends:', error);\n      throw error;\n    }\n  }\n};\n\n// Weather API\nexport const weatherAPI = {\n  // Get current weather and forecast\n  getWeather: async (city = 'nizamabad') => {\n    try {\n      // Mock data - replace with actual OpenWeatherMap API\n      return {\n        current: {\n          temperature: 28,\n          humidity: 65,\n          condition: 'Partly Cloudy',\n          windSpeed: 12\n        },\n        forecast: [{\n          date: new Date().toISOString().split('T')[0],\n          high: 32,\n          low: 22,\n          condition: 'Partly Cloudy',\n          precipitation: 20\n        }, {\n          date: new Date(Date.now() + 86400000).toISOString().split('T')[0],\n          high: 30,\n          low: 20,\n          condition: 'Sunny',\n          precipitation: 10\n        }, {\n          date: new Date(Date.now() + 172800000).toISOString().split('T')[0],\n          high: 29,\n          low: 19,\n          condition: 'Cloudy',\n          precipitation: 40\n        }]\n      };\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      throw error;\n    }\n  }\n};\n\n// MSP (Minimum Support Price) API\nexport const mspAPI = {\n  // Get current MSP for turmeric\n  getCurrentMSP: async () => {\n    try {\n      // Mock data - replace with actual government API\n      return {\n        turmeric: {\n          current: 7500,\n          previous: 7200,\n          change: 300,\n          changePercent: 4.17,\n          effectiveDate: '2024-01-01'\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching MSP data:', error);\n      throw error;\n    }\n  }\n};\n\n// SMS API\nexport const smsAPI = {\n  // Send SMS notification\n  sendSMS: async (phoneNumber, message, language = 'te') => {\n    try {\n      // Mock implementation - replace with actual SMS gateway\n      console.log(`SMS to ${phoneNumber}: ${message}`);\n      return {\n        success: true,\n        messageId: `msg_${Date.now()}`\n      };\n    } catch (error) {\n      console.error('Error sending SMS:', error);\n      throw error;\n    }\n  }\n};\n\n// Price prediction API\nexport const predictionAPI = {\n  // Get price prediction for next 7 days\n  getPricePrediction: async () => {\n    try {\n      // Mock AI prediction - replace with actual ML model\n      const predictions = [];\n      const today = new Date();\n      for (let i = 1; i <= 7; i++) {\n        const date = new Date(today);\n        date.setDate(date.getDate() + i);\n        predictions.push({\n          date: date.toISOString().split('T')[0],\n          predictedPrice: 8500 + Math.random() * 500,\n          confidence: 0.7 + Math.random() * 0.2,\n          factors: ['Weather', 'Demand', 'Supply']\n        });\n      }\n      return predictions;\n    } catch (error) {\n      console.error('Error fetching price prediction:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","marketPriceAPI","getCurrentPrices","mandi","nizamabad","hyderabad","mumbai","export","chennai","kochi","timestamp","Date","toISOString","error","console","getPriceTrends","trends","today","i","date","setDate","getDate","push","split","Math","random","weatherAPI","getWeather","city","current","temperature","humidity","condition","windSpeed","forecast","high","low","precipitation","now","mspAPI","getCurrentMSP","turmeric","previous","change","changePercent","effectiveDate","smsAPI","sendSMS","phoneNumber","message","language","log","success","messageId","predictionAPI","getPricePrediction","predictions","predictedPrice","confidence","factors"],"sources":["C:/Turmerik Bits/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// API configuration\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://api.turmerlink.com';\r\n\r\n// Market price API endpoints (mock data for now)\r\nexport const marketPriceAPI = {\r\n  // Get current turmeric prices from various sources\r\n  getCurrentPrices: async () => {\r\n    try {\r\n      // Mock data - replace with actual API calls\r\n      return {\r\n        mandi: {\r\n          nizamabad: 8500,\r\n          hyderabad: 8700,\r\n          mumbai: 9200\r\n        },\r\n        export: {\r\n          chennai: 9500,\r\n          kochi: 9800\r\n        },\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching market prices:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get price trends for the last 7 days\r\n  getPriceTrends: async () => {\r\n    try {\r\n      // Mock data - replace with actual API calls\r\n      const trends = [];\r\n      const today = new Date();\r\n      \r\n      for (let i = 6; i >= 0; i--) {\r\n        const date = new Date(today);\r\n        date.setDate(date.getDate() - i);\r\n        \r\n        trends.push({\r\n          date: date.toISOString().split('T')[0],\r\n          nizamabad: 8000 + Math.random() * 1000,\r\n          hyderabad: 8200 + Math.random() * 1000,\r\n          mumbai: 8700 + Math.random() * 1000\r\n        });\r\n      }\r\n      \r\n      return trends;\r\n    } catch (error) {\r\n      console.error('Error fetching price trends:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Weather API\r\nexport const weatherAPI = {\r\n  // Get current weather and forecast\r\n  getWeather: async (city = 'nizamabad') => {\r\n    try {\r\n      // Mock data - replace with actual OpenWeatherMap API\r\n      return {\r\n        current: {\r\n          temperature: 28,\r\n          humidity: 65,\r\n          condition: 'Partly Cloudy',\r\n          windSpeed: 12\r\n        },\r\n        forecast: [\r\n          {\r\n            date: new Date().toISOString().split('T')[0],\r\n            high: 32,\r\n            low: 22,\r\n            condition: 'Partly Cloudy',\r\n            precipitation: 20\r\n          },\r\n          {\r\n            date: new Date(Date.now() + 86400000).toISOString().split('T')[0],\r\n            high: 30,\r\n            low: 20,\r\n            condition: 'Sunny',\r\n            precipitation: 10\r\n          },\r\n          {\r\n            date: new Date(Date.now() + 172800000).toISOString().split('T')[0],\r\n            high: 29,\r\n            low: 19,\r\n            condition: 'Cloudy',\r\n            precipitation: 40\r\n          }\r\n        ]\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching weather data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// MSP (Minimum Support Price) API\r\nexport const mspAPI = {\r\n  // Get current MSP for turmeric\r\n  getCurrentMSP: async () => {\r\n    try {\r\n      // Mock data - replace with actual government API\r\n      return {\r\n        turmeric: {\r\n          current: 7500,\r\n          previous: 7200,\r\n          change: 300,\r\n          changePercent: 4.17,\r\n          effectiveDate: '2024-01-01'\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching MSP data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// SMS API\r\nexport const smsAPI = {\r\n  // Send SMS notification\r\n  sendSMS: async (phoneNumber, message, language = 'te') => {\r\n    try {\r\n      // Mock implementation - replace with actual SMS gateway\r\n      console.log(`SMS to ${phoneNumber}: ${message}`);\r\n      return { success: true, messageId: `msg_${Date.now()}` };\r\n    } catch (error) {\r\n      console.error('Error sending SMS:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Price prediction API\r\nexport const predictionAPI = {\r\n  // Get price prediction for next 7 days\r\n  getPricePrediction: async () => {\r\n    try {\r\n      // Mock AI prediction - replace with actual ML model\r\n      const predictions = [];\r\n      const today = new Date();\r\n      \r\n      for (let i = 1; i <= 7; i++) {\r\n        const date = new Date(today);\r\n        date.setDate(date.getDate() + i);\r\n        \r\n        predictions.push({\r\n          date: date.toISOString().split('T')[0],\r\n          predictedPrice: 8500 + Math.random() * 500,\r\n          confidence: 0.7 + Math.random() * 0.2,\r\n          factors: ['Weather', 'Demand', 'Supply']\r\n        });\r\n      }\r\n      \r\n      return predictions;\r\n    } catch (error) {\r\n      console.error('Error fetching price prediction:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}