{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\n\n// Supabase configuration\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'https://fnwmvnewzirxagcyxwid.supabase.co';\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZud212bmV3emlyeGFnY3l4d2lkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE0MDY5OTEsImV4cCI6MjA3Njk4Mjk5MX0.8-udxQ9Uwe55jXsyzxleXIc2e6Pif3tEFUYa9-pyU8w';\n\n// Create Supabase client\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  }\n});\n\n// Database table names\nexport const TABLES = {\n  FARMERS: 'farmers',\n  GOVERNMENT_OFFICERS: 'government_officers',\n  SALES: 'sales',\n  SUBMISSIONS: 'submissions',\n  MARKET_PRICES: 'market_prices',\n  WEATHER_DATA: 'weather_data',\n  NOTIFICATIONS: 'notifications'\n};\n\n// Helper functions for database operations\nexport const dbHelpers = {\n  // Farmers\n  async createFarmer(farmerData) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.FARMERS).insert([farmerData]).select();\n    return {\n      data,\n      error\n    };\n  },\n  async getFarmer(phoneNumber) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.FARMERS).select('*').eq('phone_number', phoneNumber).single();\n    return {\n      data,\n      error\n    };\n  },\n  async updateFarmer(phoneNumber, updateData) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.FARMERS).update(updateData).eq('phone_number', phoneNumber).select();\n    return {\n      data,\n      error\n    };\n  },\n  // Sales\n  async createSale(saleData) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.SALES).insert([saleData]).select();\n    return {\n      data,\n      error\n    };\n  },\n  async getFarmerSales(farmerId) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.SALES).select('*').eq('farmer_id', farmerId).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  },\n  // Submissions\n  async createSubmission(submissionData) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.SUBMISSIONS).insert([submissionData]).select();\n    return {\n      data,\n      error\n    };\n  },\n  async getAllSubmissions() {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.SUBMISSIONS).select(`\n        *,\n        farmers (\n          name,\n          phone_number,\n          location\n        )\n      `).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  },\n  async updateSubmissionStatus(submissionId, status, governmentResponse = null) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.SUBMISSIONS).update({\n      status,\n      government_response: governmentResponse,\n      updated_at: new Date().toISOString()\n    }).eq('id', submissionId).select();\n    return {\n      data,\n      error\n    };\n  },\n  // Government Officers\n  async createGovernmentOfficer(officerData) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.GOVERNMENT_OFFICERS).insert([officerData]).select();\n    return {\n      data,\n      error\n    };\n  },\n  async getGovernmentOfficer(officerId, department) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.GOVERNMENT_OFFICERS).select('*').eq('officer_id', officerId).eq('department', department).single();\n    return {\n      data,\n      error\n    };\n  },\n  // Market Prices\n  async createMarketPrice(priceData) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.MARKET_PRICES).insert([priceData]).select();\n    return {\n      data,\n      error\n    };\n  },\n  async getLatestMarketPrices() {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.MARKET_PRICES).select('*').order('created_at', {\n      ascending: false\n    }).limit(10);\n    return {\n      data,\n      error\n    };\n  },\n  // Weather Data\n  async createWeatherData(weatherData) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.WEATHER_DATA).insert([weatherData]).select();\n    return {\n      data,\n      error\n    };\n  },\n  async getLatestWeatherData(location) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.WEATHER_DATA).select('*').eq('location', location).order('created_at', {\n      ascending: false\n    }).limit(1).single();\n    return {\n      data,\n      error\n    };\n  },\n  // Notifications\n  async createNotification(notificationData) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.NOTIFICATIONS).insert([notificationData]).select();\n    return {\n      data,\n      error\n    };\n  },\n  async getFarmerNotifications(farmerId) {\n    const {\n      data,\n      error\n    } = await supabase.from(TABLES.NOTIFICATIONS).select('*').eq('farmer_id', farmerId).order('created_at', {\n      ascending: false\n    });\n    return {\n      data,\n      error\n    };\n  }\n};\nexport default supabase;","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","supabase","auth","autoRefreshToken","persistSession","detectSessionInUrl","TABLES","FARMERS","GOVERNMENT_OFFICERS","SALES","SUBMISSIONS","MARKET_PRICES","WEATHER_DATA","NOTIFICATIONS","dbHelpers","createFarmer","farmerData","data","error","from","insert","select","getFarmer","phoneNumber","eq","single","updateFarmer","updateData","update","createSale","saleData","getFarmerSales","farmerId","order","ascending","createSubmission","submissionData","getAllSubmissions","updateSubmissionStatus","submissionId","status","governmentResponse","government_response","updated_at","Date","toISOString","createGovernmentOfficer","officerData","getGovernmentOfficer","officerId","department","createMarketPrice","priceData","getLatestMarketPrices","limit","createWeatherData","weatherData","getLatestWeatherData","location","createNotification","notificationData","getFarmerNotifications"],"sources":["C:/Turmerik Bits/src/config/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// Supabase configuration\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'https://fnwmvnewzirxagcyxwid.supabase.co'\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZud212bmV3emlyeGFnY3l4d2lkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE0MDY5OTEsImV4cCI6MjA3Njk4Mjk5MX0.8-udxQ9Uwe55jXsyzxleXIc2e6Pif3tEFUYa9-pyU8w'\n\n// Create Supabase client\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  }\n})\n\n// Database table names\nexport const TABLES = {\n  FARMERS: 'farmers',\n  GOVERNMENT_OFFICERS: 'government_officers',\n  SALES: 'sales',\n  SUBMISSIONS: 'submissions',\n  MARKET_PRICES: 'market_prices',\n  WEATHER_DATA: 'weather_data',\n  NOTIFICATIONS: 'notifications'\n}\n\n// Helper functions for database operations\nexport const dbHelpers = {\n  // Farmers\n  async createFarmer(farmerData) {\n    const { data, error } = await supabase\n      .from(TABLES.FARMERS)\n      .insert([farmerData])\n      .select()\n    return { data, error }\n  },\n\n  async getFarmer(phoneNumber) {\n    const { data, error } = await supabase\n      .from(TABLES.FARMERS)\n      .select('*')\n      .eq('phone_number', phoneNumber)\n      .single()\n    return { data, error }\n  },\n\n  async updateFarmer(phoneNumber, updateData) {\n    const { data, error } = await supabase\n      .from(TABLES.FARMERS)\n      .update(updateData)\n      .eq('phone_number', phoneNumber)\n      .select()\n    return { data, error }\n  },\n\n  // Sales\n  async createSale(saleData) {\n    const { data, error } = await supabase\n      .from(TABLES.SALES)\n      .insert([saleData])\n      .select()\n    return { data, error }\n  },\n\n  async getFarmerSales(farmerId) {\n    const { data, error } = await supabase\n      .from(TABLES.SALES)\n      .select('*')\n      .eq('farmer_id', farmerId)\n      .order('created_at', { ascending: false })\n    return { data, error }\n  },\n\n  // Submissions\n  async createSubmission(submissionData) {\n    const { data, error } = await supabase\n      .from(TABLES.SUBMISSIONS)\n      .insert([submissionData])\n      .select()\n    return { data, error }\n  },\n\n  async getAllSubmissions() {\n    const { data, error } = await supabase\n      .from(TABLES.SUBMISSIONS)\n      .select(`\n        *,\n        farmers (\n          name,\n          phone_number,\n          location\n        )\n      `)\n      .order('created_at', { ascending: false })\n    return { data, error }\n  },\n\n  async updateSubmissionStatus(submissionId, status, governmentResponse = null) {\n    const { data, error } = await supabase\n      .from(TABLES.SUBMISSIONS)\n      .update({ \n        status, \n        government_response: governmentResponse,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', submissionId)\n      .select()\n    return { data, error }\n  },\n\n  // Government Officers\n  async createGovernmentOfficer(officerData) {\n    const { data, error } = await supabase\n      .from(TABLES.GOVERNMENT_OFFICERS)\n      .insert([officerData])\n      .select()\n    return { data, error }\n  },\n\n  async getGovernmentOfficer(officerId, department) {\n    const { data, error } = await supabase\n      .from(TABLES.GOVERNMENT_OFFICERS)\n      .select('*')\n      .eq('officer_id', officerId)\n      .eq('department', department)\n      .single()\n    return { data, error }\n  },\n\n  // Market Prices\n  async createMarketPrice(priceData) {\n    const { data, error } = await supabase\n      .from(TABLES.MARKET_PRICES)\n      .insert([priceData])\n      .select()\n    return { data, error }\n  },\n\n  async getLatestMarketPrices() {\n    const { data, error } = await supabase\n      .from(TABLES.MARKET_PRICES)\n      .select('*')\n      .order('created_at', { ascending: false })\n      .limit(10)\n    return { data, error }\n  },\n\n  // Weather Data\n  async createWeatherData(weatherData) {\n    const { data, error } = await supabase\n      .from(TABLES.WEATHER_DATA)\n      .insert([weatherData])\n      .select()\n    return { data, error }\n  },\n\n  async getLatestWeatherData(location) {\n    const { data, error } = await supabase\n      .from(TABLES.WEATHER_DATA)\n      .select('*')\n      .eq('location', location)\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .single()\n    return { data, error }\n  },\n\n  // Notifications\n  async createNotification(notificationData) {\n    const { data, error } = await supabase\n      .from(TABLES.NOTIFICATIONS)\n      .insert([notificationData])\n      .select()\n    return { data, error }\n  },\n\n  async getFarmerNotifications(farmerId) {\n    const { data, error } = await supabase\n      .from(TABLES.NOTIFICATIONS)\n      .select('*')\n      .eq('farmer_id', farmerId)\n      .order('created_at', { ascending: false })\n    return { data, error }\n  }\n}\n\nexport default supabase"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}