{"ast":null,"code":"import _objectSpread from\"C:/Turmerik Bits/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Blockchain service for supply chain traceability\nclass BlockchainService{constructor(){this.chain=[];this.pendingTransactions=[];this.miningReward=100;this.difficulty=2;this.createGenesisBlock();}createGenesisBlock(){const genesisBlock={timestamp:Date.now(),transactions:[],previousHash:'0',hash:this.calculateHash({timestamp:Date.now(),transactions:[],previousHash:'0'}),nonce:0};this.chain.push(genesisBlock);}createTransaction(from,to,amount){let data=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};const transaction={from,to,amount,data,timestamp:Date.now(),id:this.generateTransactionId()};this.pendingTransactions.push(transaction);return transaction;}minePendingTransactions(miningRewardAddress){const block={timestamp:Date.now(),transactions:this.pendingTransactions,previousHash:this.getLatestBlock().hash,nonce:0};block.hash=this.calculateHash(block);while(block.hash.substring(0,this.difficulty)!==Array(this.difficulty+1).join('0')){block.nonce++;block.hash=this.calculateHash(block);}this.chain.push(block);this.pendingTransactions=[{from:null,to:miningRewardAddress,amount:this.miningReward,timestamp:Date.now(),id:this.generateTransactionId()}];return block;}calculateHash(block){return this.simpleHash(JSON.stringify(block));}simpleHash(str){let hash=0;for(let i=0;i<str.length;i++){const char=str.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash;// Convert to 32bit integer\n}return Math.abs(hash).toString(16);}generateTransactionId(){return'tx_'+Date.now()+'_'+Math.random().toString(36).substr(2,9);}getLatestBlock(){return this.chain[this.chain.length-1];}getBalance(address){let balance=0;for(const block of this.chain){for(const transaction of block.transactions){if(transaction.from===address){balance-=transaction.amount;}if(transaction.to===address){balance+=transaction.amount;}}}return balance;}getTransactionHistory(address){const transactions=[];for(const block of this.chain){for(const transaction of block.transactions){if(transaction.from===address||transaction.to===address){transactions.push(_objectSpread(_objectSpread({},transaction),{},{blockHash:block.hash,blockTimestamp:block.timestamp}));}}}return transactions.sort((a,b)=>b.timestamp-a.timestamp);}// Turmeric-specific traceability methods\ncreateTurmericBatch(farmerId,batchData){const transaction=this.createTransaction('system',farmerId,0,_objectSpread(_objectSpread({type:'turmeric_batch_created',batchId:\"batch_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9)),farmerId},batchData),{},{timestamp:Date.now()}));this.minePendingTransactions('system');return transaction;}updateBatchStatus(batchId,status){let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const transaction=this.createTransaction('system','system',0,_objectSpread(_objectSpread({type:'batch_status_update',batchId,status},data),{},{timestamp:Date.now()}));this.minePendingTransactions('system');return transaction;}transferOwnership(batchId,from,to,price){const transaction=this.createTransaction(from,to,price,{type:'ownership_transfer',batchId,timestamp:Date.now()});this.minePendingTransactions('system');return transaction;}getBatchHistory(batchId){const history=[];for(const block of this.chain){for(const transaction of block.transactions){if(transaction.data&&transaction.data.batchId===batchId){history.push(_objectSpread(_objectSpread({},transaction),{},{blockHash:block.hash,blockTimestamp:block.timestamp}));}}}return history.sort((a,b)=>a.timestamp-b.timestamp);}verifyBatch(batchId){const history=this.getBatchHistory(batchId);if(history.length===0)return{valid:false,reason:'Batch not found'};// Check if batch was properly created\nconst creation=history.find(t=>t.data.type==='turmeric_batch_created');if(!creation)return{valid:false,reason:'No creation record found'};return{valid:true,batchData:creation.data,history:history,currentOwner:this.getCurrentOwner(batchId),totalTransactions:history.length};}getCurrentOwner(batchId){const history=this.getBatchHistory(batchId);const transfers=history.filter(t=>t.data.type==='ownership_transfer');if(transfers.length===0){const creation=history.find(t=>t.data.type==='turmeric_batch_created');return creation?creation.data.farmerId:null;}return transfers[transfers.length-1].to;}}// Export for use in React components\nexport default BlockchainService;","map":{"version":3,"names":["BlockchainService","constructor","chain","pendingTransactions","miningReward","difficulty","createGenesisBlock","genesisBlock","timestamp","Date","now","transactions","previousHash","hash","calculateHash","nonce","push","createTransaction","from","to","amount","data","arguments","length","undefined","transaction","id","generateTransactionId","minePendingTransactions","miningRewardAddress","block","getLatestBlock","substring","Array","join","simpleHash","JSON","stringify","str","i","char","charCodeAt","Math","abs","toString","random","substr","getBalance","address","balance","getTransactionHistory","_objectSpread","blockHash","blockTimestamp","sort","a","b","createTurmericBatch","farmerId","batchData","type","batchId","concat","updateBatchStatus","status","transferOwnership","price","getBatchHistory","history","verifyBatch","valid","reason","creation","find","t","currentOwner","getCurrentOwner","totalTransactions","transfers","filter"],"sources":["C:/Turmerik Bits/src/services/blockchainService.js"],"sourcesContent":["// Blockchain service for supply chain traceability\r\nclass BlockchainService {\r\n  constructor() {\r\n    this.chain = [];\r\n    this.pendingTransactions = [];\r\n    this.miningReward = 100;\r\n    this.difficulty = 2;\r\n    this.createGenesisBlock();\r\n  }\r\n\r\n  createGenesisBlock() {\r\n    const genesisBlock = {\r\n      timestamp: Date.now(),\r\n      transactions: [],\r\n      previousHash: '0',\r\n      hash: this.calculateHash({\r\n        timestamp: Date.now(),\r\n        transactions: [],\r\n        previousHash: '0'\r\n      }),\r\n      nonce: 0\r\n    };\r\n    this.chain.push(genesisBlock);\r\n  }\r\n\r\n  createTransaction(from, to, amount, data = {}) {\r\n    const transaction = {\r\n      from,\r\n      to,\r\n      amount,\r\n      data,\r\n      timestamp: Date.now(),\r\n      id: this.generateTransactionId()\r\n    };\r\n    \r\n    this.pendingTransactions.push(transaction);\r\n    return transaction;\r\n  }\r\n\r\n  minePendingTransactions(miningRewardAddress) {\r\n    const block = {\r\n      timestamp: Date.now(),\r\n      transactions: this.pendingTransactions,\r\n      previousHash: this.getLatestBlock().hash,\r\n      nonce: 0\r\n    };\r\n\r\n    block.hash = this.calculateHash(block);\r\n    \r\n    while (block.hash.substring(0, this.difficulty) !== Array(this.difficulty + 1).join('0')) {\r\n      block.nonce++;\r\n      block.hash = this.calculateHash(block);\r\n    }\r\n\r\n    this.chain.push(block);\r\n    this.pendingTransactions = [\r\n      {\r\n        from: null,\r\n        to: miningRewardAddress,\r\n        amount: this.miningReward,\r\n        timestamp: Date.now(),\r\n        id: this.generateTransactionId()\r\n      }\r\n    ];\r\n\r\n    return block;\r\n  }\r\n\r\n  calculateHash(block) {\r\n    return this.simpleHash(JSON.stringify(block));\r\n  }\r\n\r\n  simpleHash(str) {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n    return Math.abs(hash).toString(16);\r\n  }\r\n\r\n  generateTransactionId() {\r\n    return 'tx_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\n  getLatestBlock() {\r\n    return this.chain[this.chain.length - 1];\r\n  }\r\n\r\n  getBalance(address) {\r\n    let balance = 0;\r\n    for (const block of this.chain) {\r\n      for (const transaction of block.transactions) {\r\n        if (transaction.from === address) {\r\n          balance -= transaction.amount;\r\n        }\r\n        if (transaction.to === address) {\r\n          balance += transaction.amount;\r\n        }\r\n      }\r\n    }\r\n    return balance;\r\n  }\r\n\r\n  getTransactionHistory(address) {\r\n    const transactions = [];\r\n    for (const block of this.chain) {\r\n      for (const transaction of block.transactions) {\r\n        if (transaction.from === address || transaction.to === address) {\r\n          transactions.push({\r\n            ...transaction,\r\n            blockHash: block.hash,\r\n            blockTimestamp: block.timestamp\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return transactions.sort((a, b) => b.timestamp - a.timestamp);\r\n  }\r\n\r\n  // Turmeric-specific traceability methods\r\n  createTurmericBatch(farmerId, batchData) {\r\n    const transaction = this.createTransaction(\r\n      'system',\r\n      farmerId,\r\n      0,\r\n      {\r\n        type: 'turmeric_batch_created',\r\n        batchId: `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        farmerId,\r\n        ...batchData,\r\n        timestamp: Date.now()\r\n      }\r\n    );\r\n    \r\n    this.minePendingTransactions('system');\r\n    return transaction;\r\n  }\r\n\r\n  updateBatchStatus(batchId, status, data = {}) {\r\n    const transaction = this.createTransaction(\r\n      'system',\r\n      'system',\r\n      0,\r\n      {\r\n        type: 'batch_status_update',\r\n        batchId,\r\n        status,\r\n        ...data,\r\n        timestamp: Date.now()\r\n      }\r\n    );\r\n    \r\n    this.minePendingTransactions('system');\r\n    return transaction;\r\n  }\r\n\r\n  transferOwnership(batchId, from, to, price) {\r\n    const transaction = this.createTransaction(\r\n      from,\r\n      to,\r\n      price,\r\n      {\r\n        type: 'ownership_transfer',\r\n        batchId,\r\n        timestamp: Date.now()\r\n      }\r\n    );\r\n    \r\n    this.minePendingTransactions('system');\r\n    return transaction;\r\n  }\r\n\r\n  getBatchHistory(batchId) {\r\n    const history = [];\r\n    for (const block of this.chain) {\r\n      for (const transaction of block.transactions) {\r\n        if (transaction.data && transaction.data.batchId === batchId) {\r\n          history.push({\r\n            ...transaction,\r\n            blockHash: block.hash,\r\n            blockTimestamp: block.timestamp\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return history.sort((a, b) => a.timestamp - b.timestamp);\r\n  }\r\n\r\n  verifyBatch(batchId) {\r\n    const history = this.getBatchHistory(batchId);\r\n    if (history.length === 0) return { valid: false, reason: 'Batch not found' };\r\n    \r\n    // Check if batch was properly created\r\n    const creation = history.find(t => t.data.type === 'turmeric_batch_created');\r\n    if (!creation) return { valid: false, reason: 'No creation record found' };\r\n    \r\n    return {\r\n      valid: true,\r\n      batchData: creation.data,\r\n      history: history,\r\n      currentOwner: this.getCurrentOwner(batchId),\r\n      totalTransactions: history.length\r\n    };\r\n  }\r\n\r\n  getCurrentOwner(batchId) {\r\n    const history = this.getBatchHistory(batchId);\r\n    const transfers = history.filter(t => t.data.type === 'ownership_transfer');\r\n    if (transfers.length === 0) {\r\n      const creation = history.find(t => t.data.type === 'turmeric_batch_created');\r\n      return creation ? creation.data.farmerId : null;\r\n    }\r\n    return transfers[transfers.length - 1].to;\r\n  }\r\n}\r\n\r\n// Export for use in React components\r\nexport default BlockchainService;\r\n"],"mappings":"qGAAA;AACA,KAAM,CAAAA,iBAAkB,CACtBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,KAAK,CAAG,EAAE,CACf,IAAI,CAACC,mBAAmB,CAAG,EAAE,CAC7B,IAAI,CAACC,YAAY,CAAG,GAAG,CACvB,IAAI,CAACC,UAAU,CAAG,CAAC,CACnB,IAAI,CAACC,kBAAkB,CAAC,CAAC,CAC3B,CAEAA,kBAAkBA,CAAA,CAAG,CACnB,KAAM,CAAAC,YAAY,CAAG,CACnBC,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACrBC,YAAY,CAAE,EAAE,CAChBC,YAAY,CAAE,GAAG,CACjBC,IAAI,CAAE,IAAI,CAACC,aAAa,CAAC,CACvBN,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACrBC,YAAY,CAAE,EAAE,CAChBC,YAAY,CAAE,GAChB,CAAC,CAAC,CACFG,KAAK,CAAE,CACT,CAAC,CACD,IAAI,CAACb,KAAK,CAACc,IAAI,CAACT,YAAY,CAAC,CAC/B,CAEAU,iBAAiBA,CAACC,IAAI,CAAEC,EAAE,CAAEC,MAAM,CAAa,IAAX,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAC3C,KAAM,CAAAG,WAAW,CAAG,CAClBP,IAAI,CACJC,EAAE,CACFC,MAAM,CACNC,IAAI,CACJb,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACrBgB,EAAE,CAAE,IAAI,CAACC,qBAAqB,CAAC,CACjC,CAAC,CAED,IAAI,CAACxB,mBAAmB,CAACa,IAAI,CAACS,WAAW,CAAC,CAC1C,MAAO,CAAAA,WAAW,CACpB,CAEAG,uBAAuBA,CAACC,mBAAmB,CAAE,CAC3C,KAAM,CAAAC,KAAK,CAAG,CACZtB,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACrBC,YAAY,CAAE,IAAI,CAACR,mBAAmB,CACtCS,YAAY,CAAE,IAAI,CAACmB,cAAc,CAAC,CAAC,CAAClB,IAAI,CACxCE,KAAK,CAAE,CACT,CAAC,CAEDe,KAAK,CAACjB,IAAI,CAAG,IAAI,CAACC,aAAa,CAACgB,KAAK,CAAC,CAEtC,MAAOA,KAAK,CAACjB,IAAI,CAACmB,SAAS,CAAC,CAAC,CAAE,IAAI,CAAC3B,UAAU,CAAC,GAAK4B,KAAK,CAAC,IAAI,CAAC5B,UAAU,CAAG,CAAC,CAAC,CAAC6B,IAAI,CAAC,GAAG,CAAC,CAAE,CACxFJ,KAAK,CAACf,KAAK,EAAE,CACbe,KAAK,CAACjB,IAAI,CAAG,IAAI,CAACC,aAAa,CAACgB,KAAK,CAAC,CACxC,CAEA,IAAI,CAAC5B,KAAK,CAACc,IAAI,CAACc,KAAK,CAAC,CACtB,IAAI,CAAC3B,mBAAmB,CAAG,CACzB,CACEe,IAAI,CAAE,IAAI,CACVC,EAAE,CAAEU,mBAAmB,CACvBT,MAAM,CAAE,IAAI,CAAChB,YAAY,CACzBI,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACrBgB,EAAE,CAAE,IAAI,CAACC,qBAAqB,CAAC,CACjC,CAAC,CACF,CAED,MAAO,CAAAG,KAAK,CACd,CAEAhB,aAAaA,CAACgB,KAAK,CAAE,CACnB,MAAO,KAAI,CAACK,UAAU,CAACC,IAAI,CAACC,SAAS,CAACP,KAAK,CAAC,CAAC,CAC/C,CAEAK,UAAUA,CAACG,GAAG,CAAE,CACd,GAAI,CAAAzB,IAAI,CAAG,CAAC,CACZ,IAAK,GAAI,CAAA0B,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGD,GAAG,CAACf,MAAM,CAAEgB,CAAC,EAAE,CAAE,CACnC,KAAM,CAAAC,IAAI,CAAGF,GAAG,CAACG,UAAU,CAACF,CAAC,CAAC,CAC9B1B,IAAI,CAAI,CAACA,IAAI,EAAI,CAAC,EAAIA,IAAI,CAAI2B,IAAI,CAClC3B,IAAI,CAAGA,IAAI,CAAGA,IAAI,CAAE;AACtB,CACA,MAAO,CAAA6B,IAAI,CAACC,GAAG,CAAC9B,IAAI,CAAC,CAAC+B,QAAQ,CAAC,EAAE,CAAC,CACpC,CAEAjB,qBAAqBA,CAAA,CAAG,CACtB,MAAO,KAAK,CAAGlB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,GAAG,CAAGgC,IAAI,CAACG,MAAM,CAAC,CAAC,CAACD,QAAQ,CAAC,EAAE,CAAC,CAACE,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,CAC3E,CAEAf,cAAcA,CAAA,CAAG,CACf,MAAO,KAAI,CAAC7B,KAAK,CAAC,IAAI,CAACA,KAAK,CAACqB,MAAM,CAAG,CAAC,CAAC,CAC1C,CAEAwB,UAAUA,CAACC,OAAO,CAAE,CAClB,GAAI,CAAAC,OAAO,CAAG,CAAC,CACf,IAAK,KAAM,CAAAnB,KAAK,GAAI,KAAI,CAAC5B,KAAK,CAAE,CAC9B,IAAK,KAAM,CAAAuB,WAAW,GAAI,CAAAK,KAAK,CAACnB,YAAY,CAAE,CAC5C,GAAIc,WAAW,CAACP,IAAI,GAAK8B,OAAO,CAAE,CAChCC,OAAO,EAAIxB,WAAW,CAACL,MAAM,CAC/B,CACA,GAAIK,WAAW,CAACN,EAAE,GAAK6B,OAAO,CAAE,CAC9BC,OAAO,EAAIxB,WAAW,CAACL,MAAM,CAC/B,CACF,CACF,CACA,MAAO,CAAA6B,OAAO,CAChB,CAEAC,qBAAqBA,CAACF,OAAO,CAAE,CAC7B,KAAM,CAAArC,YAAY,CAAG,EAAE,CACvB,IAAK,KAAM,CAAAmB,KAAK,GAAI,KAAI,CAAC5B,KAAK,CAAE,CAC9B,IAAK,KAAM,CAAAuB,WAAW,GAAI,CAAAK,KAAK,CAACnB,YAAY,CAAE,CAC5C,GAAIc,WAAW,CAACP,IAAI,GAAK8B,OAAO,EAAIvB,WAAW,CAACN,EAAE,GAAK6B,OAAO,CAAE,CAC9DrC,YAAY,CAACK,IAAI,CAAAmC,aAAA,CAAAA,aAAA,IACZ1B,WAAW,MACd2B,SAAS,CAAEtB,KAAK,CAACjB,IAAI,CACrBwC,cAAc,CAAEvB,KAAK,CAACtB,SAAS,EAChC,CAAC,CACJ,CACF,CACF,CACA,MAAO,CAAAG,YAAY,CAAC2C,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAAChD,SAAS,CAAG+C,CAAC,CAAC/C,SAAS,CAAC,CAC/D,CAEA;AACAiD,mBAAmBA,CAACC,QAAQ,CAAEC,SAAS,CAAE,CACvC,KAAM,CAAAlC,WAAW,CAAG,IAAI,CAACR,iBAAiB,CACxC,QAAQ,CACRyC,QAAQ,CACR,CAAC,CAAAP,aAAA,CAAAA,aAAA,EAECS,IAAI,CAAE,wBAAwB,CAC9BC,OAAO,UAAAC,MAAA,CAAWrD,IAAI,CAACC,GAAG,CAAC,CAAC,MAAAoD,MAAA,CAAIpB,IAAI,CAACG,MAAM,CAAC,CAAC,CAACD,QAAQ,CAAC,EAAE,CAAC,CAACE,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CACzEY,QAAQ,EACLC,SAAS,MACZnD,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,EAEzB,CAAC,CAED,IAAI,CAACkB,uBAAuB,CAAC,QAAQ,CAAC,CACtC,MAAO,CAAAH,WAAW,CACpB,CAEAsC,iBAAiBA,CAACF,OAAO,CAAEG,MAAM,CAAa,IAAX,CAAA3C,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAC1C,KAAM,CAAAG,WAAW,CAAG,IAAI,CAACR,iBAAiB,CACxC,QAAQ,CACR,QAAQ,CACR,CAAC,CAAAkC,aAAA,CAAAA,aAAA,EAECS,IAAI,CAAE,qBAAqB,CAC3BC,OAAO,CACPG,MAAM,EACH3C,IAAI,MACPb,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,EAEzB,CAAC,CAED,IAAI,CAACkB,uBAAuB,CAAC,QAAQ,CAAC,CACtC,MAAO,CAAAH,WAAW,CACpB,CAEAwC,iBAAiBA,CAACJ,OAAO,CAAE3C,IAAI,CAAEC,EAAE,CAAE+C,KAAK,CAAE,CAC1C,KAAM,CAAAzC,WAAW,CAAG,IAAI,CAACR,iBAAiB,CACxCC,IAAI,CACJC,EAAE,CACF+C,KAAK,CACL,CACEN,IAAI,CAAE,oBAAoB,CAC1BC,OAAO,CACPrD,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CACtB,CACF,CAAC,CAED,IAAI,CAACkB,uBAAuB,CAAC,QAAQ,CAAC,CACtC,MAAO,CAAAH,WAAW,CACpB,CAEA0C,eAAeA,CAACN,OAAO,CAAE,CACvB,KAAM,CAAAO,OAAO,CAAG,EAAE,CAClB,IAAK,KAAM,CAAAtC,KAAK,GAAI,KAAI,CAAC5B,KAAK,CAAE,CAC9B,IAAK,KAAM,CAAAuB,WAAW,GAAI,CAAAK,KAAK,CAACnB,YAAY,CAAE,CAC5C,GAAIc,WAAW,CAACJ,IAAI,EAAII,WAAW,CAACJ,IAAI,CAACwC,OAAO,GAAKA,OAAO,CAAE,CAC5DO,OAAO,CAACpD,IAAI,CAAAmC,aAAA,CAAAA,aAAA,IACP1B,WAAW,MACd2B,SAAS,CAAEtB,KAAK,CAACjB,IAAI,CACrBwC,cAAc,CAAEvB,KAAK,CAACtB,SAAS,EAChC,CAAC,CACJ,CACF,CACF,CACA,MAAO,CAAA4D,OAAO,CAACd,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAC/C,SAAS,CAAGgD,CAAC,CAAChD,SAAS,CAAC,CAC1D,CAEA6D,WAAWA,CAACR,OAAO,CAAE,CACnB,KAAM,CAAAO,OAAO,CAAG,IAAI,CAACD,eAAe,CAACN,OAAO,CAAC,CAC7C,GAAIO,OAAO,CAAC7C,MAAM,GAAK,CAAC,CAAE,MAAO,CAAE+C,KAAK,CAAE,KAAK,CAAEC,MAAM,CAAE,iBAAkB,CAAC,CAE5E;AACA,KAAM,CAAAC,QAAQ,CAAGJ,OAAO,CAACK,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACrD,IAAI,CAACuC,IAAI,GAAK,wBAAwB,CAAC,CAC5E,GAAI,CAACY,QAAQ,CAAE,MAAO,CAAEF,KAAK,CAAE,KAAK,CAAEC,MAAM,CAAE,0BAA2B,CAAC,CAE1E,MAAO,CACLD,KAAK,CAAE,IAAI,CACXX,SAAS,CAAEa,QAAQ,CAACnD,IAAI,CACxB+C,OAAO,CAAEA,OAAO,CAChBO,YAAY,CAAE,IAAI,CAACC,eAAe,CAACf,OAAO,CAAC,CAC3CgB,iBAAiB,CAAET,OAAO,CAAC7C,MAC7B,CAAC,CACH,CAEAqD,eAAeA,CAACf,OAAO,CAAE,CACvB,KAAM,CAAAO,OAAO,CAAG,IAAI,CAACD,eAAe,CAACN,OAAO,CAAC,CAC7C,KAAM,CAAAiB,SAAS,CAAGV,OAAO,CAACW,MAAM,CAACL,CAAC,EAAIA,CAAC,CAACrD,IAAI,CAACuC,IAAI,GAAK,oBAAoB,CAAC,CAC3E,GAAIkB,SAAS,CAACvD,MAAM,GAAK,CAAC,CAAE,CAC1B,KAAM,CAAAiD,QAAQ,CAAGJ,OAAO,CAACK,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACrD,IAAI,CAACuC,IAAI,GAAK,wBAAwB,CAAC,CAC5E,MAAO,CAAAY,QAAQ,CAAGA,QAAQ,CAACnD,IAAI,CAACqC,QAAQ,CAAG,IAAI,CACjD,CACA,MAAO,CAAAoB,SAAS,CAACA,SAAS,CAACvD,MAAM,CAAG,CAAC,CAAC,CAACJ,EAAE,CAC3C,CACF,CAEA;AACA,cAAe,CAAAnB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}